import os
import pandas as pd
import sqlite3
from dotenv import load_dotenv

# Carrega as vari√°veis do arquivo .env (GOOGLE_API_KEY)
load_dotenv()

from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.output_parsers import StrOutputParser

# --- 1. CONFIGURA√á√ÉO ---
try:
    llm = ChatGoogleGenerativeAI(model="gemini-1.5-flash", temperature=0)
except Exception as e:
    print(f"Erro ao inicializar o modelo. Verifique sua 'GOOGLE_API_KEY'.")
    exit()

NOME_BANCO_DADOS = "gerenciamento.db"

# --- 2. FUN√á√ïES DE SUPORTE ---
def executar_consulta_sql(query: str) -> str:
    """Executa uma consulta SQL no banco de dados e retorna o resultado como texto."""
    print(f"\n--- Executando a query: [{query}] ---")
    try:
        conexao = sqlite3.connect(NOME_BANCO_DADOS)
        df = pd.read_sql_query(query, conexao)
        conexao.close()
        if df.empty:
            return "A consulta n√£o retornou nenhum resultado."
        return df.to_string()
    except Exception as e:
        return f"Erro ao executar a consulta SQL: {e}."

def limpar_saida_sql(sql_code: str) -> str:
    """
    Limpa a sa√≠da da IA para isolar e retornar apenas a primeira declara√ß√£o SQL v√°lida.
    """
    # Encontra o in√≠cio da declara√ß√£o SQL (ignorando mai√∫sculas/min√∫sculas)
    start_pos = sql_code.upper().find("SELECT")
    if start_pos == -1:
        return "ERRO: A IA n√£o gerou uma query SQL com 'SELECT'."
        
    # Isola a string a partir do 'SELECT'
    sql_from_select = sql_code[start_pos:]
    
    # Encontra o final da declara√ß√£o SQL (o ponto e v√≠rgula)
    end_pos = sql_from_select.find(";")
    if end_pos != -1:
        # Se encontrou um ';', retorna tudo at√© ele
        return sql_from_select[:end_pos].strip()
    else:
        # Se n√£o encontrou ';', apenas limpa e retorna a string
        return sql_from_select.strip()


# --- 3. O PROMPT INTELIGENTE ---
schema_tabela_vendas_limpo = [
    'ATENDIMENTO (ANDAMENTO)', 'ATENDIMENTO (N¬∫)', 'ATENDIMENTO (TIPO)', 'ATENDIMENTO (REAGENDAMENTO)', 'DATA (ABERTURA)', 'EMISSOR', 'CLIENTE (NOME)', 'CLIENTE (UNIDADE)', 'SERVI√áO (REGIME)', 'SERVI√áO (LOCAL)', 'CLIENTE (SOLICITANTE)', 'CLIENTE (FUN√á√ÉO)', 'CLIENTE (TELEFONE)', 'CLIENTE (EMAIL)', 'CLIENTE (COMPRADOR)', 'CLIENTE (FUN√á√ÉO2)', 'CLIENTE (TELEFONE2)', 'CLIENTE (EMAIL2)', 'SERVI√áO (TIPO)', 'SERVI√áO (DESCRI√á√ÉO)', 'DOCUMENTO', 'REF DOCUMENTO', 'REVIS√ÉO', 'DATA (ENVIO PROPOSTA)', 'VALIDADE', 'PRAZO (EM DIAS)', 'INDICADOR DE QUALIDADE', 'ATENDIMENTO (STATUS)', 'ATENDimento (MOTIVO - ANDAMENTO)', 'RELAT√ìRIO DE AVALIA√á√ÉO', 'DATA (IN√çCIO ATENDIMENTO)', 'REAGENDADO PARA:', 'DATA (PREVIS√ÉO DE T√âRMINO)', 'DATA (FINAL ATENDIMENTO)', 'DATA (ENVIO DOS RELAT√ìRIOS)', 'DATA (LIBERA√á√ÉO BM)', 'DATA (RECEBIMENTO PO)', 'N¬∫ PO', 'VALOR - VENDA (SERVI√áO)', 'VALOR - VENDA (CONSUM√çVEIS)', 'VALOR - VENDA (MOBILIZA√á√ÉO)', 'VALOR - VENDA (MATERIAIS)', 'VALOR - VENDA (TOTAL)', 'DESC (DESCONTO %)', 'VALOR - VENDA (SERVI√áO) DESC.', 'VALOR - VENDA (CONSUM√çVEIS) DESC.', 'VALOR - VENDA (MOBILIZA√á√ÉO) DESC.', 'VALOR - VENDA (MATERIAIS) DESC.', 'VALOR - VENDA (TOTAL) DESC.', 'VALOR - COMPRA (SERVI√áO)', 'VALOR - COMPRA (MATERIAIS)', 'VALOR - COMPRA (TOTAL)', 'N¬∫ NOTA FISCAL', 'DATA (FATURAMENTO)', 'DATA (PRAZO - PAGAMENTO)', 'DATA (RECEBimento)', '(AUX) STATUS (REALIZADO)', '(AUX) STATUS (DATA RECEBIMENTO)', '(AUX) DATA (PRAZO PAGAMENTO - DIAS)', '(AUX) SERVI√áO (BUDGET)', '(AUX) SERVI√áO (CONTRATO)', '(AUX) SERVI√áO (CONTRATO)2', '(AUX) SERVI√áO (CONTRATO)3', '(AUX) SERVI√áO (CONTRATO)4'
]
schema_str = ', '.join(f'"{col}"' for col in schema_tabela_vendas_limpo)

# PROMPT ATUALIZADO COM AS DUAS L√ìGICAS DE NEG√ìCIO
prompt_sql_translator = ChatPromptTemplate.from_messages(
    [
        ("system", f"""Voc√™ √© um especialista em SQL que traduz perguntas em queries para um banco de dados SQLite.

        **REGRAS DE NEG√ìCIO OBRIGAT√ìRIAS:**
        Primeiro, identifique se o usu√°rio est√° perguntando sobre "FATURAMENTO" ou sobre "VENDAS". Use a regra apropriada:

        **REGRA 1: Se a pergunta for sobre FATURAMENTO:**
        - **Filtro de Status:** A query DEVE incluir a cl√°usula `WHERE "ATENDIMENTO (ANDAMENTO)" IN ('Finalizado', 'Finalizado Com Faturamento')`.
        - **Coluna de Data:** A coluna para filtrar por data √© `"DATA (FATURAMENTO)"`.
        - **Coluna de Valor:** A coluna para somar faturamento √© `"VALOR - VENDA (TOTAL) DESC."`.

        **REGRA 2: Se a pergunta for sobre VENDAS:**
        - **Filtro de Status:** N√ÉO APLIQUE NENHUM FILTRO na coluna "ATENDIMENTO (ANDAMENTO)".
        - **Coluna de Data:** A coluna para filtrar por data √© `"DATA (RECEBIMENTO PO)"`.
        - **Coluna de Valor:** A coluna para somar o valor das vendas √© `"VALOR - VENDA (TOTAL) DESC."`.

        **REGRAS GERAIS DE SINTAXE SQL:**
        - Para filtrar por ano, use `strftime('%Y', NOME_DA_COLUNA_DE_DATA) = 'ANO'`.
        - Nomes de colunas com espa√ßos ou caracteres especiais DEVEM estar entre aspas duplas (").
        - **Sua √∫nica sa√≠da deve ser o c√≥digo SQL puro. N√£o adicione nenhum outro texto ou explica√ß√£o.**

        ESQUEMA DA TABELA 'Vendas':
        {schema_str}
        """),
        ("human", "{question}"),
    ]
)

prompt_final_answer = ChatPromptTemplate.from_messages(
    [
        ("system", "Voc√™ √© um assistente prestativo que resume resultados de banco de dados em uma frase clara e amig√°vel em portugu√™s."),
        ("human", "Baseado nesta pergunta '{question}' e neste resultado de banco de dados '{result}', por favor, me d√™ uma resposta final."),
    ]
)

# --- 4. O FLUXO (CHAIN) ---
sql_chain = prompt_sql_translator | llm | StrOutputParser() | limpar_saida_sql
final_chain = prompt_final_answer | llm | StrOutputParser()

# --- 5. EXECU√á√ÉO ---
if __name__ == "__main__":
    print("ü§ñ Agente Biespecializado (Faturamento e Vendas) v7.1 iniciado.")
    print("-" * 30)
    while True:
        pergunta = input("Sua pergunta: ")
        if pergunta.lower() == 'sair':
            break
        
        try:
            print("\n1. Traduzindo pergunta para SQL...")
            generated_sql = sql_chain.invoke({"question": pergunta})
            
            sql_result = executar_consulta_sql(generated_sql)
            print(f"\n2. Resultado do banco de dados:\n{sql_result}")
            
            if "Erro" in sql_result:
                print("\nRESPOSTA DO AGENTE:")
                print("N√£o foi poss√≠vel gerar uma resposta pois a consulta ao banco de dados falhou.")
            else:
                print("\n3. Gerando resposta final...")
                final_answer = final_chain.invoke({"question": pergunta, "result": sql_result})
                
                print("\nRESPOSTA DO AGENTE:")
                print(final_answer)

        except Exception as e:
            print(f"\nOcorreu um erro durante a execu√ß√£o: {e}")
        
        print("-" * 30)

